
이 책을 읽는 이유
1. 프로그래머
2. 더 나은 프로그래머가 되기 위해

우리의 목적
1. 좋은 코드와 나쁜 코드를 구분하는 능력
2. 좋은 코드를 작성하는 방법을 익한다.
3. 나쁜 코드를 좋은 코듸로 바꾸는 실력

코드가 존재하리라
- 기계가 실행할 정보의 상세한 요구사항 명시
- 프로그래밍 언어 추상화 수준이 점차 높아잔다.
- 코드는 엄밀하고 정확하고 상세하고 정형화.
// 요구사항을 모호해도 의도를 정확히 알 수 없다.
정리 : 코드는 요구사항을 표현하는 언어이다.

나쁜 코드[고행]
- 회사가 망한 원인은 나쁜 코드 탓이다.
- 지금짠 코드는 나중에 정리할 시간이 오지 않는다.

나쁜 코드로 치르는 대가
- 개발 속도를 크게 떨어뜨린다.
- 생산성이 떨어진다.
- 원대한 재설계의 시간이 10년이다.
정리 : 비용을 절감하고 전문가로 살아남는 길이다.

태도
- 전문가답지 못한 자기합리화 및 변명거리
- 좋은 코드를 사수하는 일은 프로그래머의 책임
- 관리자와 마케팅은 약속과 공약으로 "정보"를 구함.
정리 : 나쁜코드의 위험을 이해하지 않으면 전문가가 아님.

원초적 난제
- 기한을 맞추는 방법은 코드를 최대한 깨끗하게 유지하는 습관

깨끗한 코드라는 예술?
- 그림을 그리는 행위와 비슷하다.
- 코드를 구분할 줄 안다고 깨끗한 코드를 작성하지 못한다.
- 힘겹게 습득한 감삿으로 기법을 적용하는 절제와 규율이 필요.

깨끗한 코드
[비아녀 스트롭스트룹]
- 의존성을 최대한 줄이기
- 오류는 명백한 전략으로 절처리 처리
- 보기 줄거운 코드
- CPU자원을 낭비하지 않는 코드
- 세세한 사항까지 꼼꼼하게 처리하는 코드
- 한가지에 집중[클래스와 모듈]로 유혹 놉놉!

[그래디 부체]
- 단순하고 직접적이다.
- 설계자의 의도를 숨기지 않는다.
- 추상화와 단순한 제어문으로 가득하다.
정리 : 반드시 필요한 하고, 단호해야 한다.
     
[데이브 토마스]
- 읽고 쉽고, 고치기 쉬운 코드
- 의미 있는 이름이 붙는다.
- 의존성은 명확히 제공한다.
- 문학적으로 표현해야 하는 것이다.
정리 : 테스트케이스가 있어야 한다.

[마이클 페더스]
- 주의 깊게 짰다는 느낌을 준다.
- 누군가 남겨둔 코드의 감사함
- 누군가 짜놓은 작품에 감사함.
정리 : 시간을 들여 깔끔하고 단정한 코드

[론 레프리스]
- 모든 테스트를 통과한다.
- 중복이 없다.
- 시스템 내 모든 설계 아이디어를 표현한다.
- 클래스. 메서드. 함수 등을 최대한 줄인다.
정리 : 중복최소, 한 기능, 표현, 작게 추상화

[워드 커닝햄]
- 짐작했던 기능들이 그대로 수행되는 깨끗한 코드
- 문제를 풀기위한 언어라면 아름다은 코드
정리 : 어의 없울 정보도 단순한 설계의 코드
     : 단순한 코드는 프로그래머의 책임이다.
    
[우리들의 생각]
- 깨끗한 변수
- 깨끗한 함수
- 깨끗한 클래스

---
정리의 시간
- 끊임없이 기존 코드를 읡는다.
- 시간이 지나도 깨끗하게 유지해야 한다.
- 복잡한 or문 하나로 정리하면 된다.
- 프로그래머가 생각하는 방식과 기술과 기교설명
---