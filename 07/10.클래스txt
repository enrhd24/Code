### Content
- 함수보다 차원이 높은 단계까지 깨끗한 코드를 위해 신경쓰자
---
### 클래스 체계
- 정적공개 상수, 정적비공개 상수, 비공개 인스턴스 변수
- 추상화 단계가 순차적으로 내려가 신문 기사처럼 읽혀야 한다.
- 캡슐화 : 캡슐화를 풀어주는 결정은 언제나 최후의 수단이다.

### 클래스는 작아야 한다.
- 함수 : 물리적은 행 수로 크기를 측정한다
- 클래스 : 해당 클래스 책임을 기술한다. [애매모호한 것 책임이 큰 것]
- 단일 책임 원칙[SRP] 
    - 클래스나 모듈을 변경할 이유가 하나이어야 한다.
    - 깨끗하고 체계적인 소프트웨어보다 돌아가는 소프트웨어에 초점을 맞춘다.
    - 작은 클래스는 각자 맡은 책임이 하나며, 변경할 이유가 하나
    - 작은 클래스와 협력해 시스템에 필요한 동작을 수행한다.
- 응집도 : 응집도가 높으면 클래스와 변수가 서로 의존하며 논리적인 단위로 묶인다.
    - 클래스는 인스턴스 변수 수가 작아야 한다.
    - 메시드만 사용하는 인스턴스 변수가 많아지만 새로운 클래스로 쪼갠다.
    - 읍집도가 높이자도록 변수와 메서드를 적절히 분리해 클래스를 여러개 만들기
- 응집도를 유지하면 작은 클래스 여럿이 나온다.
    - 큰 함수를 작은 함수 여럿으로 나눈기만 해도 클래스 수가 많아진다.
    - 프고르갬에 점점더 체계가 잡히고 구조가 투명해진다.
- 정리
    - 리팩터링한 프로그램은 좀 더 길고 서술적인 변수 이름을 사용
    - 리팩터링한 프로그램은 코드에 주석을 추가하는 수단으로 함수와 클래스를 선언한다.
    - 가독성을 높이고자 공백을 추가하고 형식을 맞추었다.

### 변경하기 쉬운 클래스
- 깨끗한 시스템은 클래스를 체계적으로 정리해 변경에 수반하는 위험은 낮춘다.
- 클래스에 손대는 순간 설계를 개성하려는 고민과 시도가 필요하다.
- OCP : 화작에 개방적이고 수정에 폐쇄적이어야한다는 원칙
- 변경으로부터 격리
    - 구체적인 클래스와 추상클래스
    - 구체적인 클래스 : 상세한 구현[코드]를 포함한다.
    - 추상 클래스 : 개념만 포함한다
    - 테스트용 클래스 : 미리 정해좋은 표 값만 참조한ㄴ다.

---

### 정리의 시간
- 테스트가 가능할 정도로 결합도를 낮추면 유연성과 재사용성이 높아진다.
- 결함도가 낮다 : 변경으로부터 잘 격리되어 있다는 의미
- DIP : 결합도가 남은 클래스 + 추상화에 의존해야 한다는 원칙이다.
    - 추가를 얻어ㅗ는 출처나 얻어오는 방식 등과 같은 구체적인 사실을 모두 숨긴다.
