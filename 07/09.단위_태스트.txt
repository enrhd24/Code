### Content
#### 단위테스트
- 과거 : 프로그램이 돌아간다는 사실만 확인하는 일회성 코드는
- 이슈 : 함수를 테스트하는 방법
- 현재 : 애자일과 TDD덕택에 단위 테스트를 자동화하는 프로그래머
- 중요 : 제대로 된 테스트 케이스를 작성해야한다는 사실을 놓치지 말자

---

### TDD법칙 3가지
1. 실패하는 단위 테스트를 작성할 때까지 실제 코드를 작성하지 않는다.
2. 컴파일은 실패하지 않으면서 실행이 실패하는 정도로만 단위 테스트를 작성한다.
3. 현재 실패하는 테스트를 통과할 정도로만 실제 코드를 작성한다.

- 실제 코드를 전부테스트 한다는 것은 심각한 관리 문제를 유발하기도 한다.

### 깨끗한 테스트 코드 유지하기
- 이슈 : 테스트 케이스를 유지하고 보수하는 비용이 늘어나고 결함율이 높아진다.
- 현실 : 테스트 슈트를 폐기하지 않으면 코드가 제대로 도는지 확인할 방법이 없다.
- 정리 : 테스크 코드는 사고와 설계와 주의가 필요하며 깨끗해야 한다.

1. 테스트는 유연성, 유지보수성, 재사용성을 제공한다.
- 테스트 케이스가 없으면 개발자는 변경을 주저하는 이유는 버그이다.
- 테스트 케이스가 있으면 변경이 쉬워지기 때문이며, 코드를 읽거나 망가지지 않는다.


### 깨끗한 테스트 코드
#### 가독성 
- 실제 코드보다 테스트 모드에 더더욱 중요하다.
- 테스트자료를 만들고, 테스트 자료를 조작하며, 결과가 올바른지 확인한다.

1. 도메인에 특화된 테스트 언어
- API위에다 함수와 유틸리디를 구현한 다음 사용하면, 코드가 읽고 쓰기가 수월해진다.
- 테스트 언어는 나중에 테스트를 읽어볼 도와주는 것이다.
2. 이중 표준
- 테스트 API코드에 적용하는 표준은 실제 코드 표쥰과 다르다.
- 실제 환경과 테스트 환경은 요구사항이 판이하게 다르다.
- 일단 의미만 안다면 눈길에 따라 결과를 재빨리 판단할 수 있다.
##### 정리 : 실제 환경에서는 안되지만 테스트 환경에서 저녀 문제없는 방식

### 테스트당 assert 하나
- 테스트 코드를 2개 쪼갤 경우 테스트 코드를 읽기가 쉬워지지만 중복 코드가 생긴다.
- 중복코드는 템플릿 메소드 패턴[단일 assert]을 활용하면 어느정도 애누리가 된다고 한다.

1. 테스트당 개념 하나
- 새 개념을 한 함수로 몰아넣으면 독자는 존재이유와 태스트 개념을 모두 이해해야한다.
- 문제 : 한 테스트 함수에 여러 개념을 테스트한다는 사실
- 해결 : 테스트 함수 하나는 개념 하나만 테스트하라

### F.I.R.S.T
- Fast : 테스트는 빨리 돌아야 한다.
- Independent : 각 테스트틑 의존하면 안되는 이유는 실패,진단어려움,결함 이 있다.
- Repeatable : 번명이 생기는 여지를 죽이기 위해 반복 가능해야 한다. 
- Self-Validating : 성공과 실패가 없다면 판단은 주관적으로 지루한 작업이 된다.
- Timely : 단위테스트는 실제 코드를 구현하기 직전에 구현해야만 한다.

---

### 정리의 시간
- 프로젝트 건강에 중요하다.
- 유연성, 유지보수성, 재사용성을 보존하고 강화하기 때문이다.
- 테스트 코드는 지속적으로 깨끗하게 관리하고 
- 태스트 코드는 표현력을 높이고 간결하게 정리하자