이름 : 모든 것에 사용되고 간단한 큐칙을 알아보자

의도를 분명히 밝혀랴
- 절약하는 시간이 늘어난다.
- 코드이해와 변경이 쉬워진다.
- 코드의 함축성으로 인한 의도불투명
정치 : 이름으로 이해하기 쉬워짐.

그릇된 정보를 피하라
- 그릇된 단어는 의미를 흐린다.
- 일관성이 떨어지는 유사한 표기법
정리 : 미래 개발자에게 알리는 해결책

의미 있게 구분하라
- 이름이 다르면 의미도 달라야 한다.
- 불용어는 의미가 같은 중복어이다.
정리 : 읽는 사람이 차이를 알도록 이름을 지어라.

발음하기 쉬운 이름을 사용하라
- 발음하기 어렵다면 토론하기도 어렵다.
- 프로그래밍은 사회활동이다.
정리 : 발음하기 쉽다면 지적인 대화이다.

검석하기 쉬운 이름을 사용하라
- 숫자는 파일이름과 수식을 모두 검색된다.
- 검색하는 용도의 긴 변수이름
- 이름 길이는 범위 크기에 비례해야 한다.
정리 : 의미를 분석하여 산수를 가려야 한다.

인코딩을 피하라
- 문제해결에서는 인코딩은 불필요한 정신적 부담
- 발음하기 어려워 오타가 생기기도 한다.
정리 : 변수바뀌기 어려운 것, 접두어는 피하라

자신의 기억력을 자랑하지 마라
- 명료함이 최고라는 사실을 이해한다.
- 남들이 이해하는 코드를 내놓기 때문이다.
정리 : 생성자 중복정의를 할때는 구조체를 사용하자

기발한 이름은 피하라
- 재미난 이름보다 명료한이름을 선택하라
정리 : 의도를 분명라고, 솔직하게 표현하자

한 개념에 한 단어를 사용하라
- 독자적이고 일관적이어야 한다.
- 주석을 보지 않고도 프로그래머의 의도가 보여야한다.
정리 : 비슷한의미를 가진 단어는 사용하지 말자

말장난을 하지 마라
- 다른 개념을 같은 단어로 사용하지 말자
- 코드를 최대한 이해하기 쉽게 짜야한다.
정리 : 대출 훑어봐도 이해할 코드 작성이 목표이다.

해법 영역에서 가져온 이름을 사용하라
- 기술개념에는 기술 이름이 가장 적합한 선택이다.

문제영역에서 가져온 이름을 사용하라
- 해법 영역과 문제 영역을 구분할 수 있어야 한다.
- 둘 중 관련이 깉은 문제 영역으면 그 영역을 가져오기

의미 있는 맥락을 추가하라
- addrfirstName, addrLastName, addrState
- 맥락에 확실한 알고리즘,구조체를 알리자.

불필요한 맥략을 앲애라
- 의미가 분명하면 긴글보다 짧은 글이 좋다.
- 클래스.함수,변수를 구분짓는 분명한 백락

---
정리의 시간
- 설명 능력이 뛰어나고 문화적인 배경이 있어야 한다.
- 좋은 이름을 선택하는 능력은 교육문제이다.
- 코드를 개선하려는 노력을 중단해서는 안 된다.
- 가독성을 위한 문제 해결 목적으로 이름을 개선하라.
---