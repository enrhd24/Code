함수
- 읽기 쉽고 이해하기 쉬운 이유
- 의도를 분명히 표현하는 함수
- 함수의 속성을 직권적으로 파악

작게만들어라
- 블록과 들여쓰기
    - 블록은 한줄
    - 1단 이나 2단을 넘어선 안됨
정리 : 중첩 구조가 생길 길이는 안됨.

한 가지만 해라
- 추상화 수준에서 여러 단계로 나눠 수행하는 위함
- 함수가 축소가 가능한 이유는 나눠 수행이다.
정리 : 단계를 나눠 처리하지 않으면, 함수쓸 이유없음

함수 당 추상화 수준은 하나로
- 함수 내 모든 문장의 추상화가 동일해야함
- 추상화 수준을 섞으면, 코드 구분이 어려움
    - 내려가기 규칙 
      : 위에서 아래로 이야기처럼 읽혀야함
      : 함수 추상화 수준티 한 번에 한 단계씩 낮아진다.
      
Switch문
- switch문은 N가지 처리를 한다.
- 다형성을 이용하면 저차원 클래스에 숨기고 철대 반복하지 않는다.
- 다형성 객체를 생성하는 코드 안에서는 상속관계로 숨긴다.

서술적인 이름을 사용하라
- 코드를 읽으면서 짐작한 기능을 연상하게 하라
- 이름은 일관성이 있게 문수,명사,동사를 사용하자

함수 인수
- 이상적인 인수 개수는 0개이다.
- 현 시점에서 중요하지 않는 세부사항을 알아야 하는 것이다.
- 차선은 입력 인수가 1개뿐인 경우.
    - 많이 쓰는 단향 형식
      1. 2개의 경우를 분명히 구분한다.
        이름과 문맥을 주의해서 선택한다.
        환 함수 형식은 변환 형태를 유지하기 때문이다.
    - 플래스 인수
    - 이항 함수
    - 삼항 함수
    - 인수 객체
    - 인수 목룍
    - 동사와 키워드

부수 효과를 일으키지 마라
- 부수효과 : 구성가능한 함수의 범위 밖에서 발생하는 앱 상태
- 시간적인 결합을 초래하면 의도하지 않는 세션 정보가 날아간다.
- 사용자를 인증하면서 기존 세션 정보를 ㅣ워버릴 위험에 처한다.
- 출력인수를 사용하라고 설계한 변수는 this 
- 함수에서 상태를 변경해야 한다면 객체 상태를 변경하는 방식을 사용하자

명령과 조회를 분리하라
1. 객체 상태를 변경
2. 객체 정보를 반환
- 명령은 객체를 변환하거나 변경
- 조회는 조건에 들어있는 데이터 확인

오류 코드보다 예외를 사용하라
- 오류코드를 반환하면 오류 코드를 곧바로 처리해야 한다.
- 예외코드를 사용하면 오류처리 고드에서 분리된다.

반복하지 마라
- 중복은 알고리즘이 변할 때 마다 각각 손봐야 하는 단점이 있다.
- 중복을 없앨 경우 모듈 가독성이 크게 높아진다.
- 중복을 제거할 목적으로 관계형 데이터베이스에 정규 형식을 만듬.
- AOP, COP들들은 중복 제거 전략이다.

구조적 프로그래밍함수를 어떻게 짜죠
- 함수는 return문 1개 가능, break 및 continue도 안됨.
- 함수를 작게 만든다면, break,continue,goto문도 사용가능

---
정리의 시간
- 모든 시스템을 기술할 목적으로 프로그래머가 설계한 도메인 특화 언어이다.
- 프로그래밍 기술은 언 설계의 기술이다.
- 시스템에서 발생하는 모든 동작을 설명하는 함수 계층을 말한다.
- 제귀하는 것도 도메인에 특화된 언어를 사용해 자신의 이야기를 쓰느 것이다.
정리 : 진짜 목표는 시스템이라는 이야기를 풀어가는 데 있다는 사실을 명심
     : 깔끔하게 맞아떨어져야 이야기를 풀어가기가 귀워진다.