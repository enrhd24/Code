### Content[도시]
- 큰 그림을 사람들도 있고, 작은 사항에 집중하는 사람도 있댜.
- 도시가 돌아가는 이유는 적절한 추상화와 모듈화이기 때문이다.
- 개인과 개인이 관리하는 '구성요소'는 효율적으로 돌아간다.
- 높은 추상화를 통해 시스템 수준에서도 깨끗합을 유지하는 방법을 살펴본다.
---

### 시스템 제작고 시스템 사용을 분리하라
- 제작(construction) 과 사용(use)은 아주 다르다.
- 소프트웨어 시스템은 준비 과정과 런타임 로직을 분리해야 한다.
- 관심자 분리[초기화 지연]는 가장 중요하고 오래된 설계기법 중 하나이다.
- 장점 : 빨라짐, null포인터 반환없음, 
- 체계적으로 탄탄한 시스템은 소쉬운 기법으로 모듈성을 깨서는 안된다.
- 설정 논리는 일반 샐행 논리와 분리해야 모듈성이 높아져 전반적이며, 일관적인 방식도 필요함.
    - Main 분리 : 생성과 관련된 코드는 main이 호출하는 모듈로 옮긴다.
    - 팩토리 : 객체가 생성되는 시점을 애플리케이션이 결정할 필요도 생긴다
    - 의존성 주입 : 한 객체가 맡은 책임만 맡으며. main루틴이나 특수 컨테이너를 사용한다
#### 정리 : 팩토리를 호출하거나 프록시를 생성하는 방법을 제공한다


### 확장
- 


### 자바 프록시
### 순수 자바 AOP 프레임 워크
### AspectJ 관점
### 테스트 주도 시승템 아키텍처 구축
### 의사 결정을 최적화하라
### 명백한 가치가 있을 때 표준을 현명하게 사용해라
### 시스템은 도메인 특화 언어가 필요하다