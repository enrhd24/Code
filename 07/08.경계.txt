### Content
- 시스템의 들어가는 소프트웨어를 직접 개발하지 않는다.
- 패키지를 구매하고, 오픈소스를 사용한다.
- 외부 코드를 우리 코드에 갈금하게 통합해야만 한다.

### 소프트웨어 경계를 갈끔하게 처리하는 기법과 기교

---

### 외부코드 사용하기
- 개요 : 인터페이스 제공자와 인터페이스 사용자 사이에 특유의 긴장이 존재
- 내용 : 더 많은 환경에서 돌기 vs 사용자의 요구에 집중하는 인터페이스 
- 정리 : 이러한 긴정으로 시스템 경계에서 문제가 생길 소지가 많다.

- 이슈 : 클라이언트에서는 올바른 유형으로 변환할 책임이 있다.
- 이슈 : 클라이언트는 제네릭스를 사용하여 코드 가독성이 크게 높아지게 한다.
- 사용 : sernor란 인터페이스로 공개 API의 인수로 넘기거나 반환값을 사용하지 않음.

### 경계 살피고 익히기
- 장점 : 외부 코드 사용시 적은 시간에 더 많은 기능 출시가 쉬워짐.
- 여지 : 우리 자신을 위해 사용할 코드를 테스트하는 편이 바람직하다.
- 습득 : 문서를 읽으며 사용법을 결정하여 학습 테스트를 한다.

### log4j 익히기
- 사용 : 소개 페이즈를 열어 테스트 케이스를 작성한다.
- 이슈 : 콘솔창에 출력이 되지 않으면, 버그이나 일관성의 부족이다.
- 정리 : 간단한 콘솔 로거를 초기화하는 방법을 익혀 사용한다.

### 학습 테스트는 공짜 이상이다
- 개요 : 이해도, 결과출력, 패키지 차이 확인하여 투자하는 노력보다 얻는 성과가 더 크다.
- 중요 : 실제 코드와 동일한 방식으로 인테페이스를 사용하는 테스트 케이스가 필요하다.
- 주의 : 학습 테스트를 사용하지 않으면 레거시를 사ㅏ용하려는 유혹에 빠진다.

### 아직 존재하지 않는 코드를 사용하기
- 개요 : 아는 코드와 모르는 코드를 분리하는 경계이다.
- 사용 : 우리가 바라는 인테페이스를 구현하면 전적으로 통제한다는 장점이 생긴다.
- 예측 : 송신기 예측하는 설계는 테스트도 용이하여 API를 올바로 사용하는지 테스트 가능

### 깨끗한 경계
- 개요 : 통제하지 못하는 코드는 엄청난시간과 노력과 재작업을 요구한다.
- 중요 : 경계에 위치하는 코드는 깔끔히 분리하여 통제가능한 코드에 의존하도록 하자
- 장점 : 어느 방법이든 코드 가독성, 일관성이 높아지고, 유지보가 원할히 진행된다.

- 정리 : 외부 패키지를 호출하는 코드를 가능한 줄여 경계를 관리하자.
- 정리 : 우리가 원하는 인터페이스를 패키지가 제공하는 인터페이스로 변환하자.
