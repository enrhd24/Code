### Content
1. 적절하나 행 길이를 유지하라
2. 변수 선언
3. 인스턴스 변수
4. 종속 변수
5. 개념적 유사성
6. 가로 형식 맞추기
7. 들여쓰기 무시하기
8. 팀 규칙
9. 밥 아저시의 형식 규칙
---
### 형식이란
- 코드가 깔끔하고, 일관적인 것이다.
- 코드 형식을 위해 나름의 규칙을 정하기
- 필요시 규칙을 자동으로 적용하는 도구활용

### 형식을 맞추는 목적
- 코드 형식은 의사소통의 일환이다.
- 코드의 가독성은 품질에 지대한 영향을 미친다.
- 가독성 수준에 따라 유지보수, 확장성에 영향끼침.
 
---

### 적절하나 행 길이를 유지하라
- 200줄인 파일로도 커다란 시스템을 구축 가능
- 일반적으로 큰 파일보다 작은 파일이 이해가능
- 세세한 사실은 숨기고 커다란 그림을 알려준다.
- 첫부분에는 알고리즘 설명후 자신의 의도를 묘사.
- 빈행은 새로운 개념을 시작한다는 시각적 단서.
- 두개의 인스턴스 변수를 떨어뜨려 놓지 말라
- 서로 밀접한 개념은 세로롤 가까이 둬야 한다.

### 변수선언
- 지역변수는 각 함수 맨 처음에 선언

### 인스턴스 변수
- 클래스 맨 처음에 선언한다.
- 클래스 메서드가 인스턴스 변수를 사용

### 종속 함수
- 한 함수가 다른 함수를 호출시 두함수를 가까이 두기
- 프로그램이 자연스럼게 읽히기 때문이다.
- 호출되는 함수를 찾기 쉽고, 모듈 전체의 가독성이 높아짐
- 상수를 알아야 한다면, 실제 사용하는 함수로 상수를 넘기는 방법

### 개념적 유사성
- 개념적인 친화도가 놓은 코드는 서로를 끌어당긴다.
- 변수와 그 변수를 사용하는 함수
- 비숫한 동작을 수행하는 일군의 함수
- 명명법이 같고 기본 기능이 유사하면서 간단한 형식

### 가로 형식 맞추기
- 80자 이후부터 행수는 급격하게 감소한다.
- 프로그래머는 명백하게 짧은 행을 선호한다.
- 공백과 쉼표는 인수가 별개하는 사실을 보여준다.
- 우선순위가 낮은 연산자는 공백으로 구분을 짓는다.
- 목록이 길다면 문제는 목록길이지 정렬 부족이 아님.
- 들여쓰기는 선언문과 실행문을 해석하는 범위 이다.
- 왼쪽으로 코드를 맞춰 속하는 범위를 시각적으로 표현 

### 들여쓰기 무시하기
- 한 행에 범위를 뭉뚱그린 코드를 피한다.
- 들여쓰기로 점위를 제대로 표현한 코드를 선호.
- 세미콜론은 덕붙인 코드는 고통받아 새행에 넣는다.

### 팀 규칙
- 침에 속한다면 자신이 선호해야할 규칙은 "팀규칙"
- 개개인이 맘대로 짜대는 코드는 피해야 한다.
- 일관적이고 매끄러운 읽기 쉬운 문서로 이루어진다.
- 소스파일에는 신뢰감을 독자에게 제공해야 한다.

### 밥 아저씨 형식 규칙
- 코드 자체가 최고의 구현 표준 문서가 되는 예시이다.
---
정리의 시간
- 형식이란 코드가 깔끔하고, 일관적으로 규칙을 정하는 것
- 200줄이하로도 대규모 시스템 설계가 가능하다.
- 첫부분에는 알고리즘 설명후 자신의 의도를 묘사한다.
- 지역변수는 '함수'앞 , 인스턴스 변수는 '클래스'앞
- 가로 형식은 공백, 쉼표,세미콜롬으로 구분을 짓는다.
- 세로 형식은 공백,세미콜롬으로 각각의 연산들을 구분
- 팀규칙을 통해 맘대로 짜리 않고 읽기 쉬운 문서 만들기